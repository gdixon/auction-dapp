{"version":3,"sources":["config/index.js","substrate-lib/SubstrateContext.js","substrate-lib/utils.js","substrate-lib/components/TxButton.js","substrate-lib/components/DeveloperConsole.js","AccountSelector.js","BlockNumber.js","Events.js","Metadata.js","NodeInfo.js","Balances.js","Transfer.js","AuctionContract.js","Auction.js","Interactor.js","App.js","index.js"],"names":["configEnv","require","envVars","reduce","mem","n","undefined","process","slice","config","configCommon","connectedSocket","queryString","parse","window","location","search","rpc","PROVIDER_SOCKET","console","log","INIT_STATE","socket","jsonrpc","RPC","types","CUSTOM_TYPES","keyring","keyringState","api","apiError","apiState","reducer","state","action","type","payload","Error","loadAccts","SubstrateContext","React","createContext","SubstrateContextProvider","props","initState","forEach","key","useReducer","dispatch","provider","WsProvider","_api","ApiPromise","on","isReady","then","err","connect","asyncLoadAccounts","a","web3Enable","APP_NAME","web3Accounts","allAccounts","map","address","meta","name","source","loadAll","isDevelopment","DEVELOPMENT_KEYRING","error","loadAccounts","Provider","value","children","useSubstrate","useContext","utils","paramConversion","num","TxButton","accountPair","label","setStatus","color","style","attrs","disabled","useState","unsub","setUnsub","sudoKey","setSudoKey","palletRpc","callable","inputParams","paramFields","isSudo","isUncheckedSudo","useEffect","query","sudo","isEmpty","toString","acctPair","getFromAcct","isInjected","web3FromSource","injected","fromAcct","setSigner","signer","txResHandler","status","isFinalized","asFinalized","txErrHandler","sudoTx","transformed","transformParams","txExecute","tx","signAndSend","catch","uncheckedSudoTx","sudoUncheckedWeight","signedTx","unsignedTx","send","queryResHandler","result","isNone","emptyAsNull","constant","consts","transaction","opts","paramVal","inputParam","trim","params","field","ind","memo","converted","indexOf","split","e","single","isNumType","Number","parseFloat","parseInt","some","el","Button","basic","onClick","length","every","paramField","param","optional","TxGroupButton","Group","Or","DeveloperConsole","util","utilCrypto","Main","setAccountAddress","accountSelected","setAccountSelected","keyringOptions","getPairs","account","text","toUpperCase","icon","initialAddress","Menu","attached","tabular","backgroundColor","borderColor","paddingTop","paddingBottom","Container","Image","src","size","position","alignItems","target","rel","href","circular","Dropdown","selection","clearable","placeholder","options","onChange","_","dropdown","accSelec","document","querySelector","event","createEvent","initEvent","eventName","dispatchEvent","Input","id","BalanceAnnotation","accountBalance","setAccountBalance","unsubscribe","system","balance","data","free","toHuman","Label","pointing","Icon","AccountSelector","finalized","blockNumber","setBlockNumber","blockNumberTimer","setBlockNumberTimer","bestNumber","derive","chain","bestNumberFinalized","unsubscribeAll","number","toNumber","timer","time","setInterval","clearInterval","Grid","Column","Card","Content","textAlign","Statistic","extra","BlockNumber","FILTERED_EVENTS","eventFeed","setEventFeed","events","record","phase","typeDef","section","method","includes","index","summary","extraText","documentation","join","content","allEvents","feedMaxHeight","width","float","floated","Feed","clear","overflow","maxHeight","Events","version","metadata","setMetadata","getMetadata","Header","Meta","Modal","trigger","scrolling","Description","JSON","stringify","Metadata","nodeInfo","setNodeInfo","Promise","all","nodeName","nodeVersion","getInfo","NodeInfo","accounts","balances","setBalances","addresses","multi","balancesMap","acc","Table","celled","striped","Body","Row","Cell","display","minWidth","compact","addressTo","amount","formState","setFormState","prev","Form","Field","fluid","overflowWrap","defaultGasLimit","AuctionCodeHash","AuctionContract","abi","Abi","auctionContract","getContracts","contract","tags","ContractPromise","forgetAuctionContracts","forgetContract","saveContract","item","beneficiary","runTime","contractPromise","json","createAuctionContract","blueprint","BlueprintPromise","new","isInBlock","findAccountNameByAddress","accountAddress","accountName","setAuctionContract","bidAmount","setBidAmount","selectedBeneficiary","setSelectedBeneficiary","itemName","setItemName","nextItemName","setNextItemName","setRunTime","bids","setBids","highestBid","setHighestBid","highestBidder","setHighestBidder","pending","setPending","endTime","setEndTime","startTime","setStartTime","ended","setEnded","newAuction","previousContract","auctionEnd","updatePending","getPending","output","contracts","contractInfoOf","getEnd","getStart","getHighestBid","getHighestBidder","getItem","getBids","getEnded","isTrue","getBeneficiary","inline","vals","Date","now","Fragment","Divider","hidden","marginRight","bid","returnFunds","Auction","registry","argIsOptional","arg","startsWith","interxType","setInterxType","palletRPCs","setPalletRPCs","callables","setCallables","setParamFields","initFormState","getApiType","apiType","Object","keys","sort","filter","pr","c","metaType","isPlain","isMap","asMap","isDoubleMap","asDoubleMap","key1","key2","metaArgs","args","metaParam","isOptional","onPalletCallableParamChange","res","onInterxTypeChange","ev","getOptionalMsg","overflowX","Radio","checked","InteractorSubmit","Interactor","getPair","loader","Dimmer","active","Loader","centered","columns","padded","Message","negative","floating","header","contextRef","createRef","ref","Sticky","context","stackable","stretched","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.226f5814.chunk.js","sourcesContent":["import configCommon from './common.json';\r\n// Using `require` as `import` does not support dynamic loading (yet).\r\nconst configEnv = require(`./${process.env.NODE_ENV}.json`);\r\n\r\n// Accepting React env vars and aggregating them into `config` object.\r\nconst envVarNames = [\r\n  'REACT_APP_PROVIDER_SOCKET',\r\n  'REACT_APP_DEVELOPMENT_KEYRING'\r\n];\r\nconst envVars = envVarNames.reduce((mem, n) => {\r\n  // Remove the `REACT_APP_` prefix\r\n  if (process.env[n] !== undefined) mem[n.slice(10)] = process.env[n];\r\n  return mem;\r\n}, {});\r\n\r\nconst config = { ...configCommon, ...configEnv, ...envVars };\r\nexport default config;\r\n","import React, { useReducer, useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport jsonrpc from '@polkadot/types/interfaces/jsonrpc';\r\nimport queryString from 'query-string';\r\n\r\nimport { ApiPromise, WsProvider } from '@polkadot/api';\r\nimport { web3Accounts, web3Enable } from '@polkadot/extension-dapp';\r\nimport keyring from '@polkadot/ui-keyring';\r\n\r\nimport config from '../config';\r\n\r\nconst parsedQuery = queryString.parse(window.location.search);\r\nconst connectedSocket = parsedQuery.rpc || config.PROVIDER_SOCKET;\r\nconsole.log(`Connected socket: ${connectedSocket}`);\r\n\r\n///\r\n// Initial state for `useReducer`\r\n\r\nconst INIT_STATE = {\r\n  socket: connectedSocket,\r\n  jsonrpc: { ...jsonrpc, ...config.RPC },\r\n  types: config.CUSTOM_TYPES,\r\n  keyring: null,\r\n  keyringState: null,\r\n  api: null,\r\n  apiError: null,\r\n  apiState: null\r\n};\r\n\r\n///\r\n// Reducer function for `useReducer`\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'CONNECT_INIT':\r\n      return { ...state, apiState: 'CONNECT_INIT' };\r\n\r\n    case 'CONNECT':\r\n      return { ...state, api: action.payload, apiState: 'CONNECTING' };\r\n\r\n    case 'CONNECT_SUCCESS':\r\n      return { ...state, apiState: 'READY' };\r\n\r\n    case 'CONNECT_ERROR':\r\n      return { ...state, apiState: 'ERROR', apiError: action.payload };\r\n\r\n    case 'LOAD_KEYRING':\r\n      return { ...state, keyringState: 'LOADING' };\r\n\r\n    case 'SET_KEYRING':\r\n      return { ...state, keyring: action.payload, keyringState: 'READY' };\r\n\r\n    case 'KEYRING_ERROR':\r\n      return { ...state, keyring: null, keyringState: 'ERROR' };\r\n\r\n    default:\r\n      throw new Error(`Unknown type: ${action.type}`);\r\n  }\r\n};\r\n\r\n///\r\n// Connecting to the Substrate node\r\n\r\nconst connect = (state, dispatch) => {\r\n  const { apiState, socket, jsonrpc, types } = state;\r\n  // We only want this function to be performed once\r\n  if (apiState) return;\r\n\r\n  dispatch({ type: 'CONNECT_INIT' });\r\n\r\n  const provider = new WsProvider(socket);\r\n  const _api = new ApiPromise({ provider, types, rpc: jsonrpc });\r\n\r\n  // Set listeners for disconnection and reconnection event.\r\n  _api.on('connected', () => {\r\n    dispatch({ type: 'CONNECT', payload: _api });\r\n    // `ready` event is not emitted upon reconnection and is checked explicitly here.\r\n    _api.isReady.then((_api) => dispatch({ type: 'CONNECT_SUCCESS' }));\r\n  });\r\n  _api.on('ready', () => dispatch({ type: 'CONNECT_SUCCESS' }));\r\n  _api.on('error', err => dispatch({ type: 'CONNECT_ERROR', payload: err }));\r\n};\r\n\r\n///\r\n// Loading accounts from dev and polkadot-js extension\r\n\r\nlet loadAccts = false;\r\nconst loadAccounts = (state, dispatch) => {\r\n  const asyncLoadAccounts = async () => {\r\n    dispatch({ type: 'LOAD_KEYRING' });\r\n    try {\r\n      await web3Enable(config.APP_NAME);\r\n      let allAccounts = await web3Accounts();\r\n      allAccounts = allAccounts.map(({ address, meta }) =>\r\n        ({ address, meta: { ...meta, name: `${meta.name} (${meta.source})` } }));\r\n      keyring.loadAll({ isDevelopment: config.DEVELOPMENT_KEYRING }, allAccounts);\r\n      dispatch({ type: 'SET_KEYRING', payload: keyring });\r\n    } catch (e) {\r\n      console.error(e);\r\n      dispatch({ type: 'KEYRING_ERROR' });\r\n    }\r\n  };\r\n\r\n  const { keyringState } = state;\r\n  // If `keyringState` is not null `asyncLoadAccounts` is running.\r\n  if (keyringState) return;\r\n  // If `loadAccts` is true, the `asyncLoadAccounts` has been run once.\r\n  if (loadAccts) return dispatch({ type: 'SET_KEYRING', payload: keyring });\r\n\r\n  // This is the heavy duty work\r\n  loadAccts = true;\r\n  asyncLoadAccounts();\r\n};\r\n\r\nconst SubstrateContext = React.createContext();\r\n\r\nconst SubstrateContextProvider = (props) => {\r\n  // filtering props and merge with default param value\r\n  const initState = { ...INIT_STATE };\r\n  const neededPropNames = ['socket', 'types'];\r\n  neededPropNames.forEach(key => {\r\n    initState[key] = (typeof props[key] === 'undefined' ? initState[key] : props[key]);\r\n  });\r\n\r\n  const [state, dispatch] = useReducer(reducer, initState);\r\n  connect(state, dispatch);\r\n  loadAccounts(state, dispatch);\r\n\r\n  return <SubstrateContext.Provider value={state}>\r\n    {props.children}\r\n  </SubstrateContext.Provider>;\r\n};\r\n\r\n// prop typechecking\r\nSubstrateContextProvider.propTypes = {\r\n  socket: PropTypes.string,\r\n  types: PropTypes.object\r\n};\r\n\r\nconst useSubstrate = () => ({ ...useContext(SubstrateContext) });\r\n\r\nexport { SubstrateContextProvider, useSubstrate };\r\n","const utils = {\r\n  paramConversion: {\r\n    num: [\r\n      'Compact<Balance>',\r\n      'BalanceOf',\r\n      'u8', 'u16', 'u32', 'u64', 'u128',\r\n      'i8', 'i16', 'i32', 'i64', 'i128'\r\n    ]\r\n  }\r\n};\r\n\r\nexport default utils;\r\n","import React, { useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { web3FromSource } from '@polkadot/extension-dapp';\r\n\r\nimport { useSubstrate } from '../';\r\nimport utils from '../utils';\r\n\r\nfunction TxButton ({\r\n  accountPair = null,\r\n  label,\r\n  setStatus,\r\n  color = 'blue',\r\n  style = null,\r\n  type = 'QUERY',\r\n  attrs = null,\r\n  disabled = false\r\n}) {\r\n  // Hooks\r\n  const { api } = useSubstrate();\r\n  const [unsub, setUnsub] = useState(null);\r\n  const [sudoKey, setSudoKey] = useState(null);\r\n\r\n  const { palletRpc, callable, inputParams, paramFields } = attrs;\r\n\r\n  const isQuery = () => type === 'QUERY';\r\n  const isSudo = () => type === 'SUDO-TX';\r\n  const isUncheckedSudo = () => type === 'UNCHECKED-SUDO-TX';\r\n  const isUnsigned = () => type === 'UNSIGNED-TX';\r\n  const isSigned = () => type === 'SIGNED-TX';\r\n  const isRpc = () => type === 'RPC';\r\n  const isConstant = () => type === 'CONSTANT';\r\n\r\n  const loadSudoKey = () => {\r\n    (async function () {\r\n      if (!api) { return; }\r\n      const sudoKey = await api.query.sudo.key();\r\n      sudoKey.isEmpty ? setSudoKey(null) : setSudoKey(sudoKey.toString());\r\n    })();\r\n  };\r\n\r\n  useEffect(loadSudoKey, [api]);\r\n\r\n  const getFromAcct = async () => {\r\n    const {\r\n      address,\r\n      meta: { source, isInjected }\r\n    } = accountPair;\r\n    let fromAcct;\r\n\r\n    // signer is from Polkadot-js browser extension\r\n    if (isInjected) {\r\n      const injected = await web3FromSource(source);\r\n      fromAcct = address;\r\n      api.setSigner(injected.signer);\r\n    } else {\r\n      fromAcct = accountPair;\r\n    }\r\n\r\n    return fromAcct;\r\n  };\r\n\r\n  const txResHandler = ({ status }) =>\r\n    status.isFinalized\r\n      ? setStatus(`😉 Finalized. Block hash: ${status.asFinalized.toString()}`)\r\n      : setStatus(`Current transaction status: ${status.type}`);\r\n\r\n  const txErrHandler = err =>\r\n    setStatus(`😞 Transaction Failed: ${err.toString()}`);\r\n\r\n  const sudoTx = async () => {\r\n    const fromAcct = await getFromAcct();\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    // transformed can be empty parameters\r\n    const txExecute = transformed\r\n      ? api.tx.sudo.sudo(api.tx[palletRpc][callable](...transformed))\r\n      : api.tx.sudo.sudo(api.tx[palletRpc][callable]());\r\n\r\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const uncheckedSudoTx = async () => {\r\n    const fromAcct = await getFromAcct();\r\n    const txExecute =\r\n        api.tx.sudo.sudoUncheckedWeight(api.tx[palletRpc][callable](...inputParams), 0);\r\n\r\n    const unsub = txExecute.signAndSend(fromAcct, txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const signedTx = async () => {\r\n    const fromAcct = await getFromAcct();\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    // transformed can be empty parameters\r\n\r\n    const txExecute = transformed\r\n      ? api.tx[palletRpc][callable](...transformed)\r\n      : api.tx[palletRpc][callable]();\r\n\r\n    const unsub = await txExecute.signAndSend(fromAcct, txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const unsignedTx = async () => {\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    // transformed can be empty parameters\r\n    const txExecute = transformed\r\n      ? api.tx[palletRpc][callable](...transformed)\r\n      : api.tx[palletRpc][callable]();\r\n\r\n    const unsub = await txExecute.send(txResHandler)\r\n      .catch(txErrHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const queryResHandler = result =>\r\n    result.isNone ? setStatus('None') : setStatus(result.toString());\r\n\r\n  const query = async () => {\r\n    const transformed = transformParams(paramFields, inputParams);\r\n    const unsub = await api.query[palletRpc][callable](...transformed, queryResHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const rpc = async () => {\r\n    const transformed = transformParams(paramFields, inputParams, { emptyAsNull: false });\r\n    const unsub = await api.rpc[palletRpc][callable](...transformed, queryResHandler);\r\n    setUnsub(() => unsub);\r\n  };\r\n\r\n  const constant = () => {\r\n    const result = api.consts[palletRpc][callable];\r\n    result.isNone ? setStatus('None') : setStatus(result.toString());\r\n  };\r\n\r\n  const transaction = async () => {\r\n    if (unsub) {\r\n      unsub();\r\n      setUnsub(null);\r\n    }\r\n\r\n    setStatus('Sending...');\r\n\r\n    (isSudo() && sudoTx()) ||\r\n    (isUncheckedSudo() && uncheckedSudoTx()) ||\r\n    (isSigned() && signedTx()) ||\r\n    (isUnsigned() && unsignedTx()) ||\r\n    (isQuery() && query()) ||\r\n    (isRpc() && rpc()) ||\r\n    (isConstant() && constant());\r\n  };\r\n\r\n  const transformParams = (paramFields, inputParams, opts = { emptyAsNull: true }) => {\r\n    // if `opts.emptyAsNull` is true, empty param value will be added to res as `null`.\r\n    //   Otherwise, it will not be added\r\n    const paramVal = inputParams.map(inputParam => {\r\n      // To cater the js quirk that `null` is a type of `object`.\r\n      if (typeof inputParam === 'object' && inputParam !== null && typeof inputParam.value === 'string') {\r\n        return inputParam.value.trim();\r\n      } else if (typeof inputParam === 'string') {\r\n        return inputParam.trim();\r\n      }\r\n      return inputParam;\r\n    });\r\n    const params = paramFields.map((field, ind) => ({ ...field, value: paramVal[ind] || null }));\r\n\r\n    return params.reduce((memo, { type = 'string', value }) => {\r\n      if (value == null || value === '') return (opts.emptyAsNull ? [...memo, null] : memo);\r\n\r\n      let converted = value;\r\n\r\n      // Deal with a vector\r\n      if (type.indexOf('Vec<') >= 0) {\r\n        converted = converted.split(',').map(e => e.trim());\r\n        converted = converted.map(single => isNumType(type)\r\n          ? (single.indexOf('.') >= 0 ? Number.parseFloat(single) : Number.parseInt(single))\r\n          : single\r\n        );\r\n        return [...memo, converted];\r\n      }\r\n\r\n      // Deal with a single value\r\n      if (isNumType(type)) {\r\n        converted = converted.indexOf('.') >= 0 ? Number.parseFloat(converted) : Number.parseInt(converted);\r\n      }\r\n      return [...memo, converted];\r\n    }, []);\r\n  };\r\n\r\n  const isNumType = type =>\r\n    utils.paramConversion.num.some(el => type.indexOf(el) >= 0);\r\n\r\n  const allParamsFilled = () => {\r\n    if (paramFields.length === 0) { return true; }\r\n\r\n    return paramFields.every((paramField, ind) => {\r\n      const param = inputParams[ind];\r\n      if (paramField.optional) { return true; }\r\n      if (param == null) { return false; }\r\n\r\n      const value = typeof param === 'object' ? param.value : param;\r\n      return value !== null && value !== '';\r\n    });\r\n  };\r\n\r\n  const isSudoer = acctPair => {\r\n    if (!sudoKey || !acctPair) { return false; }\r\n    return acctPair.address === sudoKey;\r\n  };\r\n\r\n  return (\r\n    <Button\r\n      basic\r\n      color={color}\r\n      style={style}\r\n      type='submit'\r\n      onClick={transaction}\r\n      disabled={ disabled || !palletRpc || !callable || !allParamsFilled() ||\r\n        ((isSudo() || isUncheckedSudo()) && !isSudoer(accountPair)) }\r\n    >\r\n      {label}\r\n    </Button>\r\n  );\r\n}\r\n\r\n// prop type checking\r\nTxButton.propTypes = {\r\n  accountPair: PropTypes.object,\r\n  setStatus: PropTypes.func.isRequired,\r\n  type: PropTypes.oneOf([\r\n    'QUERY', 'RPC', 'SIGNED-TX', 'UNSIGNED-TX', 'SUDO-TX', 'UNCHECKED-SUDO-TX',\r\n    'CONSTANT']).isRequired,\r\n  attrs: PropTypes.shape({\r\n    palletRpc: PropTypes.string,\r\n    callable: PropTypes.string,\r\n    inputParams: PropTypes.array,\r\n    paramFields: PropTypes.array\r\n  }).isRequired\r\n};\r\n\r\nfunction TxGroupButton (props) {\r\n  return (\r\n    <Button.Group>\r\n      <TxButton\r\n        label='Unsigned'\r\n        type='UNSIGNED-TX'\r\n        color='grey'\r\n        {...props}\r\n      />\r\n      <Button.Or />\r\n      <TxButton\r\n        label='Signed'\r\n        type='SIGNED-TX'\r\n        color='blue'\r\n        {...props}\r\n      />\r\n      <Button.Or />\r\n      <TxButton\r\n        label='SUDO'\r\n        type='SUDO-TX'\r\n        color='red'\r\n        {...props}\r\n      />\r\n    </Button.Group>\r\n  );\r\n}\r\n\r\nexport { TxButton, TxGroupButton };\r\n","// This component will simply add utility functions to your developer console.\r\nimport { useSubstrate } from '../';\r\n\r\nexport default function DeveloperConsole (props) {\r\n  const { api, apiState, keyring, keyringState } = useSubstrate();\r\n  if (apiState === 'READY') { window.api = api; }\r\n  if (keyringState === 'READY') { window.keyring = keyring; }\r\n  window.util = require('@polkadot/util');\r\n  window.utilCrypto = require('@polkadot/util-crypto');\r\n\r\n  return null;\r\n}\r\n","import React, { useState, useEffect } from 'react';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\n\r\nimport {\r\n  Menu,\r\n  Button,\r\n  Dropdown,\r\n  Container,\r\n  Icon,\r\n  Input,\r\n  Image,\r\n  Label\r\n} from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nfunction Main (props) {\r\n  const { keyring } = useSubstrate();\r\n  const { setAccountAddress } = props;\r\n  const [accountSelected, setAccountSelected] = useState('');\r\n\r\n  // Get the list of accounts we possess the private key for\r\n  const keyringOptions = keyring.getPairs().map(account => ({\r\n    key: account.address,\r\n    value: account.address,\r\n    text: account.meta.name.toUpperCase(),\r\n    icon: 'user'\r\n  }));\r\n\r\n  const initialAddress =\r\n    keyringOptions.length > 0 ? keyringOptions[0].value : '';\r\n\r\n  // Set the initial address\r\n  useEffect(() => {\r\n    setAccountAddress(initialAddress);\r\n    setAccountSelected(initialAddress);\r\n  }, [setAccountAddress, initialAddress]);\r\n\r\n  const onChange = address => {\r\n    // Update state with new account address\r\n    setAccountAddress(address);\r\n    setAccountSelected(address);\r\n  };\r\n\r\n  return (\r\n    <Menu\r\n      attached='top'\r\n      tabular\r\n      style={{\r\n        backgroundColor: '#fff',\r\n        borderColor: '#fff',\r\n        paddingTop: '1em',\r\n        paddingBottom: '1em'\r\n      }}\r\n    >\r\n      <Container>\r\n        <Menu.Menu>\r\n          <Image src={`${process.env.PUBLIC_URL}/assets/substrate-logo.png`} size='mini' />\r\n        </Menu.Menu>\r\n        <Menu.Menu position='right' style={{ alignItems: 'center' }}>\r\n          { !accountSelected\r\n            ? <span>\r\n              Add your account with the{' '}\r\n              <a\r\n                target='_blank'\r\n                rel='noopener noreferrer'\r\n                href='https://github.com/polkadot-js/extension'\r\n              >\r\n                Polkadot JS Extension\r\n              </a>\r\n            </span>\r\n            : null }\r\n          <CopyToClipboard text={accountSelected}>\r\n            <Button\r\n              basic\r\n              circular\r\n              size='large'\r\n              icon='user'\r\n              color={accountSelected ? 'green' : 'red'}\r\n            />\r\n          </CopyToClipboard>\r\n          <Dropdown\r\n            search\r\n            selection\r\n            clearable\r\n            \r\n            placeholder='Select an account'\r\n            options={keyringOptions}\r\n            onChange={(_, dropdown) => {\r\n              onChange(dropdown.value);\r\n                // set the new value\r\n                const accSelec = document.querySelector(\"#accountSelection\");\r\n                let event = document.createEvent(\"HTMLEvents\");\r\n                event.initEvent(\"dataavailable\", true, true);\r\n                event.eventName = \"dataavailable\";\r\n                accSelec.dispatchEvent(event);\r\n                console.log(\"dispatched\")\r\n            }}\r\n            value={accountSelected}\r\n          />\r\n          <Input type=\"hidden\" id=\"accountSelection\" />\r\n          <BalanceAnnotation accountSelected={accountSelected} />\r\n        </Menu.Menu>\r\n      </Container>\r\n    </Menu>\r\n  );\r\n}\r\n\r\nfunction BalanceAnnotation (props) {\r\n  const { accountSelected } = props;\r\n  const { api } = useSubstrate();\r\n  const [accountBalance, setAccountBalance] = useState(0);\r\n\r\n  // When account address changes, update subscriptions\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n\r\n    // If the user has selected an address, create a new subscription\r\n    accountSelected &&\r\n      api.query.system.account(accountSelected, balance => {\r\n        setAccountBalance(balance.data.free.toHuman());\r\n      })\r\n        .then(unsub => {\r\n          unsubscribe = unsub;\r\n        })\r\n        .catch(console.error);\r\n\r\n    return () => unsubscribe && unsubscribe();\r\n  }, [api, accountSelected]);\r\n\r\n  return accountSelected ? (\r\n    <Label pointing='left'>\r\n      <Icon name='money' color='green' />\r\n      {accountBalance}\r\n    </Label>\r\n  ) : null;\r\n}\r\n\r\nexport default function AccountSelector (props) {\r\n  const { api, keyring } = useSubstrate();\r\n  return keyring.getPairs && api.query ? <Main {...props} /> : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Statistic, Grid, Card, Icon } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const { finalized } = props;\r\n  const [blockNumber, setBlockNumber] = useState(0);\r\n  const [blockNumberTimer, setBlockNumberTimer] = useState(0);\r\n\r\n  const bestNumber = finalized\r\n    ? api.derive.chain.bestNumberFinalized\r\n    : api.derive.chain.bestNumber;\r\n\r\n  useEffect(() => {\r\n    let unsubscribeAll = null;\r\n\r\n    bestNumber(number => {\r\n      setBlockNumber(number.toNumber());\r\n      setBlockNumberTimer(0);\r\n    })\r\n      .then(unsub => {\r\n        unsubscribeAll = unsub;\r\n      })\r\n      .catch(console.error);\r\n\r\n    return () => unsubscribeAll && unsubscribeAll();\r\n  }, [bestNumber]);\r\n\r\n  const timer = () => {\r\n    setBlockNumberTimer(time => time + 1);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const id = setInterval(timer, 1000);\r\n    return () => clearInterval(id);\r\n  }, []);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Card>\r\n        <Card.Content textAlign='center'>\r\n          <Statistic\r\n            label={(finalized ? 'Finalized' : 'Current') + ' Block'}\r\n            value={blockNumber}\r\n          />\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Icon name='time' /> {blockNumberTimer}\r\n        </Card.Content>\r\n      </Card>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function BlockNumber (props) {\r\n  const { api } = useSubstrate();\r\n  return api.derive &&\r\n    api.derive.chain &&\r\n    api.derive.chain.bestNumber &&\r\n    api.derive.chain.bestNumberFinalized ? (\r\n      <Main {...props} />\r\n    ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Feed, Grid, Button } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\n// Events to be filtered from feed\r\nconst FILTERED_EVENTS = [\r\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":0})',\r\n  'system:ExtrinsicSuccess:: (phase={\"ApplyExtrinsic\":1})'\r\n];\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const [eventFeed, setEventFeed] = useState([]);\r\n\r\n  useEffect(() => {\r\n    let unsub = null;\r\n    const allEvents = async () => {\r\n      unsub = await api.query.system.events(events => {\r\n        // loop through the Vec<EventRecord>\r\n        events.forEach(record => {\r\n          // extract the phase, event and the event types\r\n          const { event, phase } = record;\r\n          const types = event.typeDef;\r\n\r\n          // show what we are busy with\r\n          const eventName = `${event.section}:${\r\n            event.method\r\n          }:: (phase=${phase.toString()})`;\r\n\r\n          if (FILTERED_EVENTS.includes(eventName)) return;\r\n\r\n          // loop through each of the parameters, displaying the type and data\r\n          const params = event.data.map(\r\n            (data, index) => `${types[index].type}: ${data.toString()}`\r\n          );\r\n\r\n          setEventFeed(e => [{\r\n            icon: 'bell',\r\n            summary: `${eventName}-${e.length}`,\r\n            extraText: event.meta.documentation.join(', ').toString(),\r\n            content: params.join(', ')\r\n          }, ...e]);\r\n        });\r\n      });\r\n    };\r\n\r\n    allEvents();\r\n    return () => unsub && unsub();\r\n  }, [api.query.system]);\r\n\r\n  const { feedMaxHeight = 250 } = props;\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1 style={{ float: 'left' }}>Events</h1>\r\n      <Button\r\n        basic circular\r\n        size='mini'\r\n        color='grey'\r\n        floated='right'\r\n        icon='erase'\r\n        onClick={ _ => setEventFeed([]) }\r\n      />\r\n      <Feed style={{ clear: 'both', overflow: 'auto', maxHeight: feedMaxHeight }} events={eventFeed} />\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function Events (props) {\r\n  const { api } = useSubstrate();\r\n  return api.query && api.query.system && api.query.system.events ? (\r\n    <Main {...props} />\r\n  ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Modal, Button, Card } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const [metadata, setMetadata] = useState({ data: null, version: null });\r\n\r\n  useEffect(() => {\r\n    const getMetadata = async () => {\r\n      try {\r\n        const data = await api.rpc.state.getMetadata();\r\n        setMetadata({ data, version: data.version });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    getMetadata();\r\n  }, [api.rpc.state]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Card>\r\n        <Card.Content>\r\n          <Card.Header>Metadata</Card.Header>\r\n          <Card.Meta>\r\n            <span>v{metadata.version}</span>\r\n          </Card.Meta>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Modal trigger={<Button>Show Metadata</Button>}>\r\n            <Modal.Header>Runtime Metadata</Modal.Header>\r\n            <Modal.Content scrolling>\r\n              <Modal.Description>\r\n                <pre>\r\n                  <code>{JSON.stringify(metadata.data, null, 2)}</code>\r\n                </pre>\r\n              </Modal.Description>\r\n            </Modal.Content>\r\n          </Modal>\r\n        </Card.Content>\r\n      </Card>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function Metadata (props) {\r\n  const { api } = useSubstrate();\r\n  return api.rpc && api.rpc.state && api.rpc.state.getMetadata ? (\r\n    <Main {...props} />\r\n  ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Card, Icon, Grid } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nfunction Main (props) {\r\n  const { api } = useSubstrate();\r\n  const [nodeInfo, setNodeInfo] = useState({});\r\n\r\n  useEffect(() => {\r\n    const getInfo = async () => {\r\n      try {\r\n        const [chain, nodeName, nodeVersion] = await Promise.all([\r\n          api.rpc.system.chain(),\r\n          api.rpc.system.name(),\r\n          api.rpc.system.version()\r\n        ]);\r\n        setNodeInfo({ chain, nodeName, nodeVersion });\r\n      } catch (e) {\r\n        console.error(e);\r\n      }\r\n    };\r\n    getInfo();\r\n  }, [api.rpc.system]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <Card>\r\n        <Card.Content>\r\n          <Card.Header>{nodeInfo.nodeName}</Card.Header>\r\n          <Card.Meta>\r\n            <span>{nodeInfo.chain}</span>\r\n          </Card.Meta>\r\n          <Card.Description>\r\n            Auction dApp for the {' '} Hello world! Polkadot hackathon - {' '}\r\n            <a href='https://gitcoin.co/issue/Polkadot-Network/hello-world-by-polkadot/2/100023928'>\r\n                [ADVANCED CHALLENGE] Build A DApp\r\n            </a>\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <Icon name='setting' />v{nodeInfo.nodeVersion}\r\n        </Card.Content>\r\n      </Card>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nexport default function NodeInfo (props) {\r\n  const { api } = useSubstrate();\r\n  return api.rpc &&\r\n    api.rpc.system &&\r\n    api.rpc.system.chain &&\r\n    api.rpc.system.name &&\r\n    api.rpc.system.version ? (\r\n      <Main {...props} />\r\n    ) : null;\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Table, Grid, Button } from 'semantic-ui-react';\r\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\r\nimport { useSubstrate } from './substrate-lib';\r\n\r\nexport default function Main (props) {\r\n  const { api, keyring } = useSubstrate();\r\n  const accounts = keyring.getPairs();\r\n  const [balances, setBalances] = useState({});\r\n\r\n  useEffect(() => {\r\n    const addresses = keyring.getPairs().map(account => account.address);\r\n    let unsubscribeAll = null;\r\n\r\n    api.query.system.account\r\n      .multi(addresses, balances => {\r\n        const balancesMap = addresses.reduce((acc, address, index) => ({\r\n          ...acc, [address]: balances[index].data.free.toHuman()\r\n        }), {});\r\n        setBalances(balancesMap);\r\n      }).then(unsub => {\r\n        unsubscribeAll = unsub;\r\n      }).catch(console.error);\r\n\r\n    return () => unsubscribeAll && unsubscribeAll();\r\n  }, [api, keyring, setBalances]);\r\n\r\n  return (\r\n    <Grid.Column>\r\n      <h1>Balances</h1>\r\n      <Table celled striped size='small'>\r\n        <Table.Body>{accounts.map(account =>\r\n          <Table.Row key={account.address}>\r\n            <Table.Cell width={3} textAlign='right'>{account.meta.name}</Table.Cell>\r\n            <Table.Cell width={10}>\r\n              <span style={{ display: 'inline-block', minWidth: '31em' }}>\r\n                {account.address}\r\n              </span>\r\n              <CopyToClipboard text={account.address}>\r\n                <Button\r\n                  basic\r\n                  circular\r\n                  compact\r\n                  size='mini'\r\n                  color='blue'\r\n                  icon='copy outline'\r\n                />\r\n              </CopyToClipboard>\r\n            </Table.Cell>\r\n            <Table.Cell width={3}>{\r\n              balances && balances[account.address] &&\r\n              balances[account.address]\r\n            }</Table.Cell>\r\n          </Table.Row>\r\n        )}\r\n        </Table.Body>\r\n      </Table>\r\n    </Grid.Column>\r\n  );\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Form, Input, Grid, Label, Icon } from 'semantic-ui-react';\r\nimport { TxButton } from './substrate-lib/components';\r\n\r\nexport default function Main (props) {\r\n  const [status, setStatus] = useState(null);\r\n  const [formState, setFormState] = useState({ addressTo: null, amount: 0 });\r\n  const { accountPair } = props;\r\n\r\n  const onChange = (_, data) =>\r\n    setFormState(prev => ({ ...prev, [data.state]: data.value }));\r\n\r\n  const { addressTo, amount } = formState;\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1>Transfer</h1>\r\n      <Form>\r\n        <Form.Field>\r\n          <Label basic color='teal'>\r\n            <Icon name='hand point right' />\r\n            1 Unit = 1000000000000\r\n          </Label>\r\n        </Form.Field>\r\n        <Form.Field>Transfer more than the existential amount for account with 0 balance</Form.Field>\r\n        <Form.Field>\r\n          <Input\r\n            fluid\r\n            label='To'\r\n            type='text'\r\n            placeholder='address'\r\n            state='addressTo'\r\n            onChange={onChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <Input\r\n            fluid\r\n            label='Amount'\r\n            type='number'\r\n            state='amount'\r\n            onChange={onChange}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field style={{ textAlign: 'center' }}>\r\n          <TxButton\r\n            accountPair={accountPair}\r\n            label='Submit'\r\n            type='SIGNED-TX'\r\n            setStatus={setStatus}\r\n            attrs={{\r\n              palletRpc: 'balances',\r\n              callable: 'transfer',\r\n              inputParams: [addressTo, amount],\r\n              paramFields: [true, true]\r\n            }}\r\n          />\r\n        </Form.Field>\r\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\r\n      </Form>\r\n    </Grid.Column>\r\n  );\r\n}\r\n","// import contract components so that we can interact with the auction\r\nimport {Abi, ContractPromise, BlueprintPromise} from '@polkadot/api-contract';\r\n// import the autions abi\r\nimport metadata from './AuctionMetadata.json';\r\n// default gas usage is high enough to cover all actions\r\nexport const defaultGasLimit = 300000n * 1000000n;\r\n// 10DOT is provided as an endowment (10*(10**15))\r\nexport const defaultEndowment = 1000000000000000;\r\n// this is the contracts codeHash as defined in the AuctionMetadata.json\r\nconst AuctionCodeHash = '0x3b24ef85aa1971f101f9fd9dbacaec82f2138f12d694c0c8489a0874111deb85';\r\n\r\n// retrieve the contract that is currently in-play\r\nexport default function AuctionContract(api) {\r\n    const abi = new Abi(metadata);\r\n    let auctionContract = null;\r\n    keyring.getContracts().forEach(contract => {\r\n        if (contract.meta.tags.includes('auction')) {\r\n            auctionContract = new ContractPromise(api, abi, contract.address);\r\n        }\r\n    });\r\n  \r\n    // return the new contract\r\n    return auctionContract;\r\n};\r\n\r\n// drop old contracts\r\nfunction forgetAuctionContracts() {\r\n    keyring.getContracts().forEach(contract => {\r\n        if (contract.meta.tags.includes('auction')) {\r\n            keyring.forgetContract(contract.address);\r\n        }\r\n    });\r\n};\r\n\r\n// record the contract and details\r\nfunction saveContract(contract, abi, item, beneficiary, runTime, contractPromise, api) {\r\n    keyring.saveContract(contract.address.toString(), {\r\n        contract: {\r\n            abi: JSON.stringify(abi.json)\r\n        },\r\n        item: item,\r\n        beneficiary: beneficiary,\r\n        runTime: runTime,\r\n        name: \"Auction\",\r\n        tags: [\"auction\"]\r\n    });\r\n    contractPromise(new ContractPromise(api, abi, contract.address));\r\n};\r\n\r\n// method to create and deploy a new contract using the uploaded .wasm and given abi\r\nexport async function createAuctionContract(api, accountPair, item, beneficiary, runTime, contractPromise) {\r\n    const abi = new Abi(metadata);\r\n    const blueprint = new BlueprintPromise(api, abi, AuctionCodeHash);\r\n    const unsub = await blueprint.tx\r\n        .new(defaultEndowment, defaultGasLimit, item, beneficiary.address, runTime)\r\n        .signAndSend(accountPair, (result) => {\r\n            if (result.status.isInBlock || result.status.isFinalized) {\r\n                if (result.contract) {\r\n                    forgetAuctionContracts();\r\n                    saveContract(result.contract, abi, item, beneficiary.address, runTime, contractPromise, api);\r\n                }\r\n                unsub();\r\n            }\r\n        });\r\n};\r\n","import React, {useEffect, useState} from 'react';\r\nimport {Button, Card, Divider, Input, Form, Grid, Statistic} from 'semantic-ui-react';\r\n\r\nimport {useSubstrate} from './substrate-lib';\r\nimport AuctionContract, {createAuctionContract, defaultGasLimit} from \"./AuctionContract\";\r\n\r\nfunction Main(props) {\r\n    const {api, keyring} = useSubstrate();\r\n    const {accountPair} = props;\r\n\r\n    const findAccountNameByAddress = (accountAddress) => {\r\n        const accounts = keyring.getPairs();\r\n        let accountName = accountAddress;\r\n        accounts.forEach(({address, meta}) => {\r\n            if (address === accountAddress) {\r\n                accountName = meta.name;\r\n            }\r\n        });\r\n        return accountName;\r\n    };\r\n\r\n    // get the current contract thats set-up\r\n    const [auctionContract, setAuctionContract] = useState(AuctionContract(api));\r\n\r\n    // record the bid amount\r\n    const [bidAmount, setBidAmount] = useState(0);\r\n\r\n    // select who is being used as the auctioneer\r\n    const [selectedBeneficiary, setSelectedBeneficiary] = useState(null);\r\n    // itemName is the current name\r\n    const [itemName, setItemName] = useState('');\r\n    // nextItemName is what we'll set with the next deployment\r\n    const [nextItemName, setNextItemName] = useState('');\r\n    // how long will the next auction run for?\r\n    const [runTime, setRunTime] = useState(0);\r\n    // record the number of bids\r\n    const [bids, setBids] = useState(0);\r\n    // record the highest bid\r\n    const [highestBid, setHighestBid] = useState(0);\r\n    // record the highest bidder\r\n    const [highestBidder, setHighestBidder] = useState('');\r\n    // record how much is pending to be returned to the user\r\n    const [pending, setPending] = useState(0);\r\n\r\n    // record the times so that we can check if the auction is still running\r\n    const [endTime, setEndTime] = useState(0);\r\n    const [startTime, setStartTime] = useState(0);\r\n    const [ended, setEnded] = useState(0);\r\n\r\n    // create a new instance\r\n    const newAuction = async () => {\r\n        createAuctionContract(api, accountPair, nextItemName, accountPair, runTime, (contractPromise) => {\r\n            const previousContract = auctionContract;\r\n            setAuctionContract(contractPromise);\r\n            if (previousContract) {\r\n                auctionContract.tx.auctionEnd(0, defaultGasLimit).signAndSend(accountPair, () => {\r\n                });\r\n            }\r\n        });\r\n    };\r\n    \r\n    // calls to methods on the contract\r\n    const bid = () => {\r\n        auctionContract.tx.bid(1000000000000000 * bidAmount, defaultGasLimit).signAndSend(accountPair, () => {\r\n        });\r\n    };\r\n    const auctionEnd = () => {\r\n        auctionContract.tx.auctionEnd(0, defaultGasLimit).signAndSend(accountPair, () => {\r\n        });\r\n    };\r\n    const returnFunds = () => {\r\n        auctionContract.tx.returnFunds(0, defaultGasLimit).signAndSend(accountPair, () => {\r\n        });\r\n    };\r\n\r\n    // read the state from the contract\r\n    const updateItemName = () => {\r\n        auctionContract && auctionContract.query.getItem(accountPair.address, 0, defaultGasLimit).then((item) => {\r\n            if (item.output) {\r\n                setItemName(item.output.toString().slice(1, item.output.length));\r\n            }\r\n        });\r\n    };\r\n    const updateBids = () => {\r\n        auctionContract && auctionContract.query.getBids(accountPair.address, 0, defaultGasLimit).then((bids) => {\r\n            if (bids.output) {\r\n                setBids(bids.output.toNumber());\r\n            }\r\n        });\r\n    };\r\n    const updatePending = () => {\r\n        auctionContract && auctionContract.query.getPending(accountPair.address, 0, defaultGasLimit, accountPair.address).then((pending) => {\r\n            if (pending.output) {\r\n                setPending(pending.output.toNumber()/(10**15));\r\n            } else {\r\n                setPending(0)\r\n            }\r\n        });\r\n    };\r\n    const updateHighestBid = () => {\r\n        auctionContract && auctionContract.query.getHighestBid(accountPair.address, 0, defaultGasLimit).then((balance) => {\r\n            if (balance.output) {\r\n                setHighestBid(balance.output.toNumber() / 1000000000000000);\r\n            }\r\n        });\r\n    };\r\n    const updateHighestBidder = () => {\r\n        auctionContract && auctionContract.query.getHighestBidder(accountPair.address, 0, defaultGasLimit).then((account) => {\r\n            if (account.output) {\r\n                setHighestBidder(findAccountNameByAddress(account.output.toHuman()));\r\n            }\r\n        });\r\n    };\r\n    const updateEndTime = () => {\r\n        auctionContract && auctionContract.query.getEnd(accountPair.address, 0, defaultGasLimit).then((endTime) => {\r\n            if (endTime.output) {\r\n                setEndTime(endTime.output.toNumber());\r\n            }\r\n        });\r\n    };\r\n    const updateStartTime = () => {\r\n        auctionContract && auctionContract.query.getStart(accountPair.address, 0, defaultGasLimit).then((startTime) => {\r\n            if (startTime.output) {\r\n                setStartTime(startTime.output.toNumber());\r\n            }\r\n        });\r\n    };\r\n    const updateEnded = () => {\r\n        auctionContract && auctionContract.query.getEnded(accountPair.address, 0, defaultGasLimit).then((ended) => {\r\n            if (ended.output) {\r\n                setEnded(ended.output.isTrue);\r\n            }\r\n        });\r\n    };\r\n    const updateBeneficiary = () => {\r\n        auctionContract && auctionContract.query.getBeneficiary(accountPair.address, 0, defaultGasLimit).then((beneficiary) => {\r\n            if (beneficiary.output && !beneficiary.output.isEmpty) {\r\n                setSelectedBeneficiary(findAccountNameByAddress(beneficiary.output.toHuman()));\r\n            }\r\n        });\r\n    };\r\n\r\n    // updatePending immediately so that keyring changes update state\r\n    updatePending();\r\n\r\n    // effects are updated when the ui receives an event\r\n    useEffect(() => {\r\n        auctionContract && api.query.contracts.contractInfoOf(auctionContract.address, async () => {\r\n            updateEndTime();\r\n            updateStartTime();\r\n            updateHighestBid();\r\n            updateHighestBidder();\r\n            updateItemName();\r\n            updateBids();\r\n            updatePending();\r\n            updateEnded();\r\n            updateBeneficiary();\r\n        });\r\n    }, [api, auctionContract]);\r\n\r\n    return (\r\n        <Grid.Column>\r\n            <h1>Auction</h1>\r\n            <Form>\r\n                <Form.Group inline>\r\n                    <Form.Field style={{textAlign: 'center'}}>\r\n                        <Input\r\n                            fluid\r\n                            type='text'\r\n                            style={{minWidth: \"400px\"}}\r\n                            placeholder='Describe the item you would like to sell at auction...'\r\n                            onChange={(_, vals) => {\r\n                                setNextItemName(vals.value);\r\n                            }}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field style={{textAlign: 'center'}}>\r\n                        <Input\r\n                            fluid\r\n                            style={{minWidth: \"300px\"}}\r\n                            type='number'\r\n                            placeholder='How long should the auction run for (ms)?'\r\n                            onChange={(_, vals) => {\r\n                                setRunTime(vals.value);\r\n                            }}\r\n                        />\r\n                    </Form.Field>\r\n                    <Form.Field style={{textAlign: 'center'}}>\r\n                        <Button \r\n                            onClick={newAuction} \r\n                            disabled={auctionContract && (endTime - Date.now()) > 0} \r\n                            color={'blue'}\r\n                        >\r\n                            Start a new auction\r\n                        </Button>\r\n                    </Form.Field>      \r\n                </Form.Group>\r\n            </Form>\r\n            {auctionContract && <React.Fragment>\r\n                {(endTime - Date.now()) > 0 && <h3 color={'blue'}>You are bidding on \"{itemName}\" being sold by {selectedBeneficiary}</h3>}\r\n                {(endTime - Date.now()) <= 0 &&\r\n                <h3 color={'green'}>{(!selectedBeneficiary ? \"No auctions have been deployed!\" : \"This auction has ended!\")}</h3>}\r\n                <Card.Group>\r\n                    <Card>\r\n                        <Statistic value={highestBid} label={(bids > 0 ? highestBidder + ((endTime - Date.now()) > 0 ? ' is winning' : ' won \"'+itemName+'\"') : \"No bids yet\")}/>\r\n                    </Card>\r\n                    <Card>\r\n                        <Statistic value={bids} label={'Bids'}/>\r\n                    </Card>\r\n                    <Card>\r\n                        <Statistic value={((endTime - Date.now()) > 0 ? (endTime - Date.now())/1000 : 0)} label={'seconds left'}/>\r\n                    </Card>\r\n                </Card.Group>\r\n                <Divider hidden/>\r\n                <Form>\r\n                    <Form.Group inline>\r\n                        <Form.Field style={{textAlign: 'center'}}>\r\n                            <Input\r\n                                fluid\r\n                                style={{marginRight: \"5px\"}}\r\n                                type='number'\r\n                                disabled={startTime > 0 && (endTime - Date.now()) <= 0}\r\n                                placeholder='Enter a bid amount'\r\n                                onChange={(_, vals) => {\r\n                                    setBidAmount(vals.value);\r\n                                }}\r\n                            />\r\n                            <Button onClick={bid} disabled={!selectedBeneficiary || (startTime > 0 && (endTime - Date.now()) <= 0)}>Place bid of {bidAmount} DOT for {itemName}</Button>\r\n                            <Button onClick={returnFunds} disabled={!selectedBeneficiary || !pending}>Return {pending} DOT from losing bid{(pending==1 ? \"\" : \"'s\")}</Button>\r\n                            <Button onClick={auctionEnd} disabled={!selectedBeneficiary || ended || startTime > 0 && (endTime - Date.now()) > 0}>Complete the sale (transfer winning bid to the beneficiary)</Button>\r\n                        </Form.Field>\r\n                    </Form.Group>\r\n                </Form>\r\n            </React.Fragment>}\r\n        </Grid.Column>\r\n    );\r\n}\r\n\r\nexport default function Auction(props) {\r\n    const {api} = useSubstrate();\r\n    const {accountPair} = props;\r\n    return (api.registry && accountPair\r\n        ? <Main {...props} /> : null);\r\n}\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Grid, Form, Dropdown, Input, Label } from 'semantic-ui-react';\r\n\r\nimport { useSubstrate } from './substrate-lib';\r\nimport { TxButton, TxGroupButton } from './substrate-lib/components';\r\n\r\nconst argIsOptional = (arg) =>\r\n  arg.type.toString().startsWith('Option<');\r\n\r\nfunction Main (props) {\r\n  const { api, jsonrpc } = useSubstrate();\r\n  const { accountPair } = props;\r\n  const [status, setStatus] = useState(null);\r\n\r\n  const [interxType, setInterxType] = useState('EXTRINSIC');\r\n  const [palletRPCs, setPalletRPCs] = useState([]);\r\n  const [callables, setCallables] = useState([]);\r\n  const [paramFields, setParamFields] = useState([]);\r\n\r\n  const initFormState = {\r\n    palletRpc: '',\r\n    callable: '',\r\n    inputParams: []\r\n  };\r\n\r\n  const [formState, setFormState] = useState(initFormState);\r\n  const { palletRpc, callable, inputParams } = formState;\r\n\r\n  const getApiType = (api, interxType) => {\r\n    if (interxType === 'QUERY') {\r\n      return api.query;\r\n    } else if (interxType === 'EXTRINSIC') {\r\n      return api.tx;\r\n    } else if (interxType === 'RPC') {\r\n      return api.rpc;\r\n    } else {\r\n      return api.consts;\r\n    }\r\n  };\r\n\r\n  const updatePalletRPCs = () => {\r\n    if (!api) { return; }\r\n    const apiType = getApiType(api, interxType);\r\n    const palletRPCs = Object.keys(apiType).sort()\r\n      .filter(pr => Object.keys(apiType[pr]).length > 0)\r\n      .map(pr => ({ key: pr, value: pr, text: pr }));\r\n    setPalletRPCs(palletRPCs);\r\n  };\r\n\r\n  const updateCallables = () => {\r\n    if (!api || palletRpc === '') { return; }\r\n    const callables = Object.keys(getApiType(api, interxType)[palletRpc]).sort()\r\n      .map(c => ({ key: c, value: c, text: c }));\r\n    setCallables(callables);\r\n  };\r\n\r\n  const updateParamFields = () => {\r\n    if (!api || palletRpc === '' || callable === '') {\r\n      setParamFields([]);\r\n      return;\r\n    }\r\n\r\n    let paramFields = [];\r\n\r\n    if (interxType === 'QUERY') {\r\n      const metaType = api.query[palletRpc][callable].meta.type;\r\n      if (metaType.isPlain) {\r\n        // Do nothing as `paramFields` is already set to []\r\n      } else if (metaType.isMap) {\r\n        paramFields = [{\r\n          name: metaType.asMap.key.toString(),\r\n          type: metaType.asMap.key.toString(),\r\n          optional: false\r\n        }];\r\n      } else if (metaType.isDoubleMap) {\r\n        paramFields = [{\r\n          name: metaType.asDoubleMap.key1.toString(),\r\n          type: metaType.asDoubleMap.key1.toString(),\r\n          optional: false\r\n        }, {\r\n          name: metaType.asDoubleMap.key2.toString(),\r\n          type: metaType.asDoubleMap.key2.toString(),\r\n          optional: false\r\n        }];\r\n      }\r\n    } else if (interxType === 'EXTRINSIC') {\r\n      const metaArgs = api.tx[palletRpc][callable].meta.args;\r\n\r\n      if (metaArgs && metaArgs.length > 0) {\r\n        paramFields = metaArgs.map(arg => ({\r\n          name: arg.name.toString(),\r\n          type: arg.type.toString(),\r\n          optional: argIsOptional(arg)\r\n        }));\r\n      }\r\n    } else if (interxType === 'RPC') {\r\n      let metaParam = [];\r\n\r\n      if (jsonrpc[palletRpc] && jsonrpc[palletRpc][callable]) {\r\n        metaParam = jsonrpc[palletRpc][callable].params;\r\n      }\r\n\r\n      if (metaParam.length > 0) {\r\n        paramFields = metaParam.map(arg => ({\r\n          name: arg.name,\r\n          type: arg.type,\r\n          optional: arg.isOptional || false\r\n        }));\r\n      }\r\n    } else if (interxType === 'CONSTANT') {\r\n      paramFields = [];\r\n    }\r\n\r\n    setParamFields(paramFields);\r\n  };\r\n\r\n  useEffect(updatePalletRPCs, [api, interxType]);\r\n  useEffect(updateCallables, [api, interxType, palletRpc]);\r\n  useEffect(updateParamFields, [api, interxType, palletRpc, callable]);\r\n\r\n  const onPalletCallableParamChange = (_, data) => {\r\n    setFormState(formState => {\r\n      let res;\r\n      const { state, value } = data;\r\n      if (typeof state === 'object') {\r\n        // Input parameter updated\r\n        const { ind, paramField: { type } } = state;\r\n        const inputParams = [...formState.inputParams];\r\n        inputParams[ind] = { type, value };\r\n        res = { ...formState, inputParams };\r\n      } else if (state === 'palletRpc') {\r\n        res = { ...formState, [state]: value, callable: '', inputParams: [] };\r\n      } else if (state === 'callable') {\r\n        res = { ...formState, [state]: value, inputParams: [] };\r\n      }\r\n      return res;\r\n    });\r\n  };\r\n\r\n  const onInterxTypeChange = (ev, data) => {\r\n    setInterxType(data.value);\r\n    // clear the formState\r\n    setFormState(initFormState);\r\n  };\r\n\r\n  const getOptionalMsg = (interxType) =>\r\n    interxType === 'RPC'\r\n      ? 'Optional Parameter'\r\n      : 'Leaving this field as blank will submit a NONE value';\r\n\r\n  return (\r\n    <Grid.Column width={8}>\r\n      <h1>Pallet Interactor</h1>\r\n      <Form>\r\n        <Form.Group style={{ overflowX: 'auto' }} inline>\r\n          <label>Interaction Type</label>\r\n          <Form.Radio\r\n            label='Extrinsic'\r\n            name='interxType'\r\n            value='EXTRINSIC'\r\n            checked={interxType === 'EXTRINSIC'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n          <Form.Radio\r\n            label='Query'\r\n            name='interxType'\r\n            value='QUERY'\r\n            checked={interxType === 'QUERY'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n          <Form.Radio\r\n            label='RPC'\r\n            name='interxType'\r\n            value='RPC'\r\n            checked={interxType === 'RPC'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n          <Form.Radio\r\n            label='Constant'\r\n            name='interxType'\r\n            value='CONSTANT'\r\n            checked={interxType === 'CONSTANT'}\r\n            onChange={onInterxTypeChange}\r\n          />\r\n        </Form.Group>\r\n        <Form.Field>\r\n          <Dropdown\r\n            placeholder='Pallets / RPC'\r\n            fluid\r\n            label='Pallet / RPC'\r\n            onChange={onPalletCallableParamChange}\r\n            search\r\n            selection\r\n            state='palletRpc'\r\n            value={palletRpc}\r\n            options={palletRPCs}\r\n          />\r\n        </Form.Field>\r\n        <Form.Field>\r\n          <Dropdown\r\n            placeholder='Callables'\r\n            fluid\r\n            label='Callable'\r\n            onChange={onPalletCallableParamChange}\r\n            search\r\n            selection\r\n            state='callable'\r\n            value={callable}\r\n            options={callables}\r\n          />\r\n        </Form.Field>\r\n        {paramFields.map((paramField, ind) =>\r\n          <Form.Field key={`${paramField.name}-${paramField.type}`}>\r\n            <Input\r\n              placeholder={paramField.type}\r\n              fluid\r\n              type='text'\r\n              label={paramField.name}\r\n              state={{ ind, paramField }}\r\n              value={ inputParams[ind] ? inputParams[ind].value : '' }\r\n              onChange={onPalletCallableParamChange}\r\n            />\r\n            { paramField.optional\r\n              ? <Label\r\n                basic\r\n                pointing\r\n                color='teal'\r\n                content = { getOptionalMsg(interxType) }\r\n              />\r\n              : null\r\n            }\r\n          </Form.Field>\r\n        )}\r\n        <Form.Field style={{ textAlign: 'center' }}>\r\n          <InteractorSubmit\r\n            accountPair={accountPair}\r\n            setStatus={setStatus}\r\n            attrs={{ interxType, palletRpc, callable, inputParams, paramFields }}\r\n          />\r\n        </Form.Field>\r\n        <div style={{ overflowWrap: 'break-word' }}>{status}</div>\r\n      </Form>\r\n    </Grid.Column>\r\n  );\r\n}\r\n\r\nfunction InteractorSubmit (props) {\r\n  const { attrs: { interxType } } = props;\r\n  if (interxType === 'QUERY') {\r\n    return <TxButton\r\n      label = 'Query'\r\n      type = 'QUERY'\r\n      color = 'blue'\r\n      {...props}\r\n    />;\r\n  } else if (interxType === 'EXTRINSIC') {\r\n    return <TxGroupButton {...props} />;\r\n  } else if (interxType === 'RPC' || interxType === 'CONSTANT') {\r\n    return <TxButton\r\n      label = 'Submit'\r\n      type = {interxType}\r\n      color = 'blue'\r\n      {...props}\r\n    />;\r\n  }\r\n}\r\n\r\nexport default function Interactor (props) {\r\n  const { api } = useSubstrate();\r\n  return api.tx ? <Main {...props} /> : null;\r\n}\r\n","/* eslint-disable */\r\nimport React, {createRef, useState} from 'react';\r\nimport {Container, Dimmer, Grid, Loader, Message, Sticky} from 'semantic-ui-react';\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nimport {SubstrateContextProvider, useSubstrate} from './substrate-lib';\r\nimport {DeveloperConsole} from './substrate-lib/components';\r\n\r\nimport AccountSelector from './AccountSelector';\r\nimport BlockNumber from './BlockNumber';\r\nimport Events from './Events';\r\nimport Metadata from './Metadata';\r\nimport NodeInfo from './NodeInfo';\r\nimport Balances from \"./Balances\";\r\nimport Transfer from \"./Transfer\";\r\nimport Auction from \"./Auction\";\r\nimport Interactor from \"./Interactor\";\r\n\r\nfunction Main() {\r\n    const [accountAddress, setAccountAddress] = useState(null);\r\n    const {apiState, keyring, keyringState, apiError} = useSubstrate();\r\n    const accountPair =\r\n        accountAddress &&\r\n        keyringState === 'READY' &&\r\n        keyring.getPair(accountAddress);\r\n\r\n    const loader = text =>\r\n        <Dimmer active>\r\n            <Loader size='small'>{text}</Loader>\r\n        </Dimmer>;\r\n\r\n    const message = err =>\r\n        <Grid centered columns={2} padded>\r\n            <Grid.Column>\r\n                <Message negative compact floating\r\n                         header='Error Connecting to Substrate'\r\n                         content={`${JSON.stringify(err, null, 4)}`}\r\n                />\r\n            </Grid.Column>\r\n        </Grid>;\r\n\r\n    if (apiState === 'ERROR') return message(apiError);\r\n    else if (apiState !== 'READY') return loader('Connecting to Substrate');\r\n\r\n    if (keyringState !== 'READY') {\r\n        return loader('Loading accounts (please review any extension\\'s authorization)');\r\n    }\r\n\r\n    const contextRef = createRef();\r\n\r\n    return (\r\n        <div ref={contextRef}>\r\n            <Sticky context={contextRef}>\r\n                <AccountSelector setAccountAddress={setAccountAddress}/>\r\n            </Sticky>\r\n            <Container>\r\n                <Grid stackable columns='equal'>\r\n                    <Grid.Row stretched>\r\n                        <NodeInfo/>\r\n                        <Metadata/>\r\n                        <BlockNumber/>\r\n                        <BlockNumber finalized/>\r\n                    </Grid.Row>\r\n                    <Grid.Row stretched>\r\n                        <Auction accountPair={accountPair}/>\r\n                    </Grid.Row>\r\n                    <Grid.Row stretched>\r\n                        <Balances/>\r\n                    </Grid.Row>\r\n                    <Grid.Row stretched>\r\n                        <Transfer accountPair={accountPair}/>\r\n                    </Grid.Row>\r\n                    <Grid.Row>\r\n                        <Interactor accountPair={accountPair}/>\r\n                        <Events/>\r\n                    </Grid.Row>\r\n                </Grid>\r\n            </Container>\r\n            <DeveloperConsole/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default function App() {\r\n    return (\r\n        <SubstrateContextProvider>\r\n            <Main/>\r\n        </SubstrateContextProvider>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}